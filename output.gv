digraph program {
	node_006FE688 [ label = "translation_unit" color = red] 
	node_006FE688 -> node_0222FA08
	node_0222FA08 [ label = "external_declaration" color = red] 
	node_0222FA08 -> node_0222F988
	node_0222F988 [ label = "function_definition" color = red] 
	node_0222F988 -> node_00841880
	node_0222F988 -> node_02221608
	node_0222F988 -> node_0222F908
	node_00841880 [ label = "declaration_specifiers" color = red] 
	node_00841880 -> node_00841800
	node_02221608 [ label = "declarator" color = red] 
	node_02221608 -> node_02221588
	node_0222F908 [ label = "compound_statement" color = red] 
	node_0222F908 -> node_02221688
	node_0222F908 -> node_0222F808
	node_0222F908 -> node_0222F888
	node_00841800 [ label = "type_specifier" color = red] 
	node_00841800 -> node_00841780
	node_02221588 [ label = "direct_declarator" color = red] 
	node_02221588 -> node_00841980
	node_02221588 -> node_00841A00
	node_02221588 -> node_02221488
	node_02221588 -> node_02221508
	node_02221688 [ label = "{" color = blue] 
	node_0222F808 [ label = "block_item_list" color = red] 
	node_0222F808 -> node_0222CF08
	node_0222F808 -> node_0222F788
	node_0222F888 [ label = "}" color = blue] 
	node_00841780 [ label = "int" color = blue] 
	node_00841980 [ label = "direct_declarator" color = red] 
	node_00841980 -> node_00841900
	node_00841A00 [ label = "(" color = blue] 
	node_02221488 [ label = "parameter_type_list" color = red] 
	node_02221488 -> node_02221408
	node_02221508 [ label = ")" color = blue] 
	node_0222CF08 [ label = "block_item_list" color = red] 
	node_0222CF08 -> node_02229E88
	node_0222CF08 -> node_0222CE88
	node_0222F788 [ label = "block_item" color = red] 
	node_0222F788 -> node_0222DA88
	node_00841900 [ label = "main" color = blue] 
	node_02221408 [ label = "parameter_list" color = red] 
	node_02221408 -> node_02220D08
	node_02221408 -> node_02220D88
	node_02221408 -> node_02221388
	node_02229E88 [ label = "block_item_list" color = red] 
	node_02229E88 -> node_02226E08
	node_02229E88 -> node_02229E08
	node_0222CE88 [ label = "block_item" color = red] 
	node_0222CE88 -> node_0222CE08
	node_0222DA88 [ label = "statement" color = red] 
	node_0222DA88 -> node_0222DA08
	node_02220D08 [ label = "parameter_list" color = red] 
	node_02220D08 -> node_02220C88
	node_02220D88 [ label = "," color = blue] 
	node_02221388 [ label = "parameter_declaration" color = red] 
	node_02221388 -> node_02220F08
	node_02221388 -> node_02221308
	node_02226E08 [ label = "block_item_list" color = red] 
	node_02226E08 -> node_02222708
	node_02226E08 -> node_02226D88
	node_02229E08 [ label = "block_item" color = red] 
	node_02229E08 -> node_02229D88
	node_0222CE08 [ label = "statement" color = red] 
	node_0222CE08 -> node_0222CD88
	node_0222DA08 [ label = "jump_statement" color = red] 
	node_0222DA08 -> node_0222CF88
	node_0222DA08 -> node_0222D908
	node_0222DA08 -> node_0222D988
	node_02220C88 [ label = "parameter_declaration" color = red] 
	node_02220C88 -> node_00841B80
	node_02220C88 -> node_02220C08
	node_02220F08 [ label = "declaration_specifiers" color = red] 
	node_02220F08 -> node_02220E88
	node_02221308 [ label = "declarator" color = red] 
	node_02221308 -> node_02221008
	node_02221308 -> node_02221288
	node_02222708 [ label = "block_item_list" color = red] 
	node_02222708 -> node_02222688
	node_02226D88 [ label = "block_item" color = red] 
	node_02226D88 -> node_02226D08
	node_02229D88 [ label = "statement" color = red] 
	node_02229D88 -> node_02229D08
	node_0222CD88 [ label = "expression_statement" color = red] 
	node_0222CD88 -> node_0222CC88
	node_0222CD88 -> node_0222CD08
	node_0222CF88 [ label = "return" color = blue] 
	node_0222D908 [ label = "expression" color = red] 
	node_0222D908 -> node_0222D888
	node_0222D988 [ label = ";" color = blue] 
	node_00841B80 [ label = "declaration_specifiers" color = red] 
	node_00841B80 -> node_00841B00
	node_02220C08 [ label = "declarator" color = red] 
	node_02220C08 -> node_02220B88
	node_02220E88 [ label = "type_specifier" color = red] 
	node_02220E88 -> node_02220E08
	node_02221008 [ label = "pointer" color = red] 
	node_02221008 -> node_02220F88
	node_02221288 [ label = "direct_declarator" color = red] 
	node_02221288 -> node_02221108
	node_02221288 -> node_02221188
	node_02221288 -> node_02221208
	node_02222688 [ label = "block_item" color = red] 
	node_02222688 -> node_02222608
	node_02226D08 [ label = "statement" color = red] 
	node_02226D08 -> node_02226C88
	node_02229D08 [ label = "expression_statement" color = red] 
	node_02229D08 -> node_02229C08
	node_02229D08 -> node_02229C88
	node_0222CC88 [ label = "expression" color = red] 
	node_0222CC88 -> node_0222CC08
	node_0222CD08 [ label = ";" color = blue] 
	node_0222D888 [ label = "assignment_expression" color = red] 
	node_0222D888 -> node_0222D808
	node_00841B00 [ label = "type_specifier" color = red] 
	node_00841B00 -> node_00841A80
	node_02220B88 [ label = "direct_declarator" color = red] 
	node_02220B88 -> node_00841C00
	node_02220E08 [ label = "char" color = blue] 
	node_02220F88 [ label = "*" color = blue] 
	node_02221108 [ label = "direct_declarator" color = red] 
	node_02221108 -> node_02221088
	node_02221188 [ label = "[" color = blue] 
	node_02221208 [ label = "]" color = blue] 
	node_02222608 [ label = "declaration" color = red] 
	node_02222608 -> node_02221808
	node_02222608 -> node_02222508
	node_02222608 -> node_02222588
	node_02226C88 [ label = "expression_statement" color = red] 
	node_02226C88 -> node_02226B88
	node_02226C88 -> node_02226C08
	node_02229C08 [ label = "expression" color = red] 
	node_02229C08 -> node_02229B88
	node_02229C88 [ label = ";" color = blue] 
	node_0222CC08 [ label = "assignment_expression" color = red] 
	node_0222CC08 -> node_0222CB88
	node_0222D808 [ label = "conditional_expression" color = red] 
	node_0222D808 -> node_0222D788
	node_00841A80 [ label = "int" color = blue] 
	node_00841C00 [ label = "argc" color = blue] 
	node_02221088 [ label = "argv" color = blue] 
	node_02221808 [ label = "declaration_specifiers" color = red] 
	node_02221808 -> node_02221788
	node_02222508 [ label = "init_declarator_list" color = red] 
	node_02222508 -> node_02222488
	node_02222588 [ label = ";" color = blue] 
	node_02226B88 [ label = "expression" color = red] 
	node_02226B88 -> node_02226B08
	node_02226C08 [ label = ";" color = blue] 
	node_02229B88 [ label = "assignment_expression" color = red] 
	node_02229B88 -> node_02229B08
	node_0222CB88 [ label = "conditional_expression" color = red] 
	node_0222CB88 -> node_0222CB08
	node_0222D788 [ label = "logical_or_expression" color = red] 
	node_0222D788 -> node_0222D708
	node_02221788 [ label = "type_specifier" color = red] 
	node_02221788 -> node_02221708
	node_02222488 [ label = "init_declarator" color = red] 
	node_02222488 -> node_02222408
	node_02226B08 [ label = "assignment_expression" color = red] 
	node_02226B08 -> node_02226A88
	node_02229B08 [ label = "conditional_expression" color = red] 
	node_02229B08 -> node_02229A88
	node_0222CB08 [ label = "logical_or_expression" color = red] 
	node_0222CB08 -> node_0222CA88
	node_0222D708 [ label = "logical_and_expression" color = red] 
	node_0222D708 -> node_0222D688
	node_02221708 [ label = "char" color = blue] 
	node_02222408 [ label = "declarator" color = red] 
	node_02222408 -> node_02222388
	node_02226A88 [ label = "conditional_expression" color = red] 
	node_02226A88 -> node_02226A08
	node_02229A88 [ label = "logical_or_expression" color = red] 
	node_02229A88 -> node_02229A08
	node_0222CA88 [ label = "logical_and_expression" color = red] 
	node_0222CA88 -> node_0222CA08
	node_0222D688 [ label = "inclusive_or_expression" color = red] 
	node_0222D688 -> node_0222D608
	node_02222388 [ label = "direct_declarator" color = red] 
	node_02222388 -> node_02221908
	node_02222388 -> node_02221988
	node_02222388 -> node_02222288
	node_02222388 -> node_02222308
	node_02226A08 [ label = "logical_or_expression" color = red] 
	node_02226A08 -> node_02226988
	node_02229A08 [ label = "logical_and_expression" color = red] 
	node_02229A08 -> node_02229988
	node_0222CA08 [ label = "inclusive_or_expression" color = red] 
	node_0222CA08 -> node_0222C988
	node_0222D608 [ label = "exclusive_or_expression" color = red] 
	node_0222D608 -> node_0222D588
	node_02221908 [ label = "direct_declarator" color = red] 
	node_02221908 -> node_02221888
	node_02221988 [ label = "[" color = blue] 
	node_02222288 [ label = "assignment_expression" color = red] 
	node_02222288 -> node_02222208
	node_02222308 [ label = "]" color = blue] 
	node_02226988 [ label = "logical_and_expression" color = red] 
	node_02226988 -> node_02226908
	node_02229988 [ label = "inclusive_or_expression" color = red] 
	node_02229988 -> node_02229908
	node_0222C988 [ label = "exclusive_or_expression" color = red] 
	node_0222C988 -> node_0222C908
	node_0222D588 [ label = "and_expression" color = red] 
	node_0222D588 -> node_0222D508
	node_02221888 [ label = "name" color = blue] 
	node_02222208 [ label = "conditional_expression" color = red] 
	node_02222208 -> node_02222188
	node_02226908 [ label = "inclusive_or_expression" color = red] 
	node_02226908 -> node_02226888
	node_02229908 [ label = "exclusive_or_expression" color = red] 
	node_02229908 -> node_02229888
	node_0222C908 [ label = "and_expression" color = red] 
	node_0222C908 -> node_0222C888
	node_0222D508 [ label = "equality_expression" color = red] 
	node_0222D508 -> node_0222D488
	node_02222188 [ label = "logical_or_expression" color = red] 
	node_02222188 -> node_02222108
	node_02226888 [ label = "exclusive_or_expression" color = red] 
	node_02226888 -> node_02226808
	node_02229888 [ label = "and_expression" color = red] 
	node_02229888 -> node_02229808
	node_0222C888 [ label = "equality_expression" color = red] 
	node_0222C888 -> node_0222C808
	node_0222D488 [ label = "relational_expression" color = red] 
	node_0222D488 -> node_0222D408
	node_02222108 [ label = "logical_and_expression" color = red] 
	node_02222108 -> node_02222088
	node_02226808 [ label = "and_expression" color = red] 
	node_02226808 -> node_02226788
	node_02229808 [ label = "equality_expression" color = red] 
	node_02229808 -> node_02229788
	node_0222C808 [ label = "relational_expression" color = red] 
	node_0222C808 -> node_0222C788
	node_0222D408 [ label = "shift_expression" color = red] 
	node_0222D408 -> node_0222D388
	node_02222088 [ label = "inclusive_or_expression" color = red] 
	node_02222088 -> node_02222008
	node_02226788 [ label = "equality_expression" color = red] 
	node_02226788 -> node_02226708
	node_02229788 [ label = "relational_expression" color = red] 
	node_02229788 -> node_02229708
	node_0222C788 [ label = "shift_expression" color = red] 
	node_0222C788 -> node_0222C708
	node_0222D388 [ label = "additive_expression" color = red] 
	node_0222D388 -> node_0222D308
	node_02222008 [ label = "exclusive_or_expression" color = red] 
	node_02222008 -> node_02221F88
	node_02226708 [ label = "relational_expression" color = red] 
	node_02226708 -> node_02226688
	node_02229708 [ label = "shift_expression" color = red] 
	node_02229708 -> node_02229688
	node_0222C708 [ label = "additive_expression" color = red] 
	node_0222C708 -> node_0222C688
	node_0222D308 [ label = "multiplicative_expression" color = red] 
	node_0222D308 -> node_0222D288
	node_02221F88 [ label = "and_expression" color = red] 
	node_02221F88 -> node_02221F08
	node_02226688 [ label = "shift_expression" color = red] 
	node_02226688 -> node_02226608
	node_02229688 [ label = "additive_expression" color = red] 
	node_02229688 -> node_02229608
	node_0222C688 [ label = "multiplicative_expression" color = red] 
	node_0222C688 -> node_0222C608
	node_0222D288 [ label = "cast_expression" color = red] 
	node_0222D288 -> node_0222D208
	node_02221F08 [ label = "equality_expression" color = red] 
	node_02221F08 -> node_02221E88
	node_02226608 [ label = "additive_expression" color = red] 
	node_02226608 -> node_02226588
	node_02229608 [ label = "multiplicative_expression" color = red] 
	node_02229608 -> node_02229588
	node_0222C608 [ label = "cast_expression" color = red] 
	node_0222C608 -> node_0222C588
	node_0222D208 [ label = "unary_expression" color = red] 
	node_0222D208 -> node_0222D188
	node_02221E88 [ label = "relational_expression" color = red] 
	node_02221E88 -> node_02221E08
	node_02226588 [ label = "multiplicative_expression" color = red] 
	node_02226588 -> node_02226508
	node_02229588 [ label = "cast_expression" color = red] 
	node_02229588 -> node_02229508
	node_0222C588 [ label = "unary_expression" color = red] 
	node_0222C588 -> node_0222C508
	node_0222D188 [ label = "postfix_expression" color = red] 
	node_0222D188 -> node_0222D108
	node_02221E08 [ label = "shift_expression" color = red] 
	node_02221E08 -> node_02221D88
	node_02226508 [ label = "cast_expression" color = red] 
	node_02226508 -> node_02226488
	node_02229508 [ label = "unary_expression" color = red] 
	node_02229508 -> node_02229488
	node_0222C508 [ label = "postfix_expression" color = red] 
	node_0222C508 -> node_0222A008
	node_0222C508 -> node_0222A088
	node_0222C508 -> node_0222C408
	node_0222C508 -> node_0222C488
	node_0222D108 [ label = "primary_expression" color = red] 
	node_0222D108 -> node_0222D088
	node_02221D88 [ label = "additive_expression" color = red] 
	node_02221D88 -> node_02221D08
	node_02226488 [ label = "unary_expression" color = red] 
	node_02226488 -> node_02226408
	node_02229488 [ label = "postfix_expression" color = red] 
	node_02229488 -> node_02226F88
	node_02229488 -> node_02227008
	node_02229488 -> node_02229388
	node_02229488 -> node_02229408
	node_0222A008 [ label = "postfix_expression" color = red] 
	node_0222A008 -> node_02229F88
	node_0222A088 [ label = "(" color = blue] 
	node_0222C408 [ label = "argument_expression_list" color = red] 
	node_0222C408 -> node_0222AA08
	node_0222C408 -> node_0222AA88
	node_0222C408 -> node_0222C388
	node_0222C488 [ label = ")" color = blue] 
	node_0222D088 [ label = "constant" color = red] 
	node_0222D088 -> node_0222D008
	node_02221D08 [ label = "multiplicative_expression" color = red] 
	node_02221D08 -> node_02221C88
	node_02226408 [ label = "postfix_expression" color = red] 
	node_02226408 -> node_02222888
	node_02226408 -> node_02222908
	node_02226408 -> node_02226308
	node_02226408 -> node_02226388
	node_02226F88 [ label = "postfix_expression" color = red] 
	node_02226F88 -> node_02226F08
	node_02227008 [ label = "(" color = blue] 
	node_02229388 [ label = "argument_expression_list" color = red] 
	node_02229388 -> node_02227988
	node_02229388 -> node_02227A08
	node_02229388 -> node_02229308
	node_02229408 [ label = ")" color = blue] 
	node_02229F88 [ label = "primary_expression" color = red] 
	node_02229F88 -> node_02229F08
	node_0222AA08 [ label = "argument_expression_list" color = red] 
	node_0222AA08 -> node_0222A988
	node_0222AA88 [ label = "," color = blue] 
	node_0222C388 [ label = "assignment_expression" color = red] 
	node_0222C388 -> node_0222C308
	node_0222D008 [ label = "0" color = blue] 
	node_02221C88 [ label = "cast_expression" color = red] 
	node_02221C88 -> node_02221C08
	node_02222888 [ label = "postfix_expression" color = red] 
	node_02222888 -> node_02222808
	node_02222908 [ label = "(" color = blue] 
	node_02226308 [ label = "argument_expression_list" color = red] 
	node_02226308 -> node_02226288
	node_02226388 [ label = ")" color = blue] 
	node_02226F08 [ label = "primary_expression" color = red] 
	node_02226F08 -> node_02226E88
	node_02227988 [ label = "argument_expression_list" color = red] 
	node_02227988 -> node_02227908
	node_02227A08 [ label = "," color = blue] 
	node_02229308 [ label = "assignment_expression" color = red] 
	node_02229308 -> node_02229288
	node_02229F08 [ label = "printf" color = blue] 
	node_0222A988 [ label = "assignment_expression" color = red] 
	node_0222A988 -> node_0222A908
	node_0222C308 [ label = "conditional_expression" color = red] 
	node_0222C308 -> node_0222C288
	node_02221C08 [ label = "unary_expression" color = red] 
	node_02221C08 -> node_02221B88
	node_02222808 [ label = "primary_expression" color = red] 
	node_02222808 -> node_02222788
	node_02226288 [ label = "assignment_expression" color = red] 
	node_02226288 -> node_02226208
	node_02226E88 [ label = "scanf" color = blue] 
	node_02227908 [ label = "assignment_expression" color = red] 
	node_02227908 -> node_02227888
	node_02229288 [ label = "conditional_expression" color = red] 
	node_02229288 -> node_02229208
	node_0222A908 [ label = "conditional_expression" color = red] 
	node_0222A908 -> node_0222A888
	node_0222C288 [ label = "logical_or_expression" color = red] 
	node_0222C288 -> node_0222C208
	node_02221B88 [ label = "postfix_expression" color = red] 
	node_02221B88 -> node_02221B08
	node_02222788 [ label = "printf" color = blue] 
	node_02226208 [ label = "conditional_expression" color = red] 
	node_02226208 -> node_02226188
	node_02227888 [ label = "conditional_expression" color = red] 
	node_02227888 -> node_02227808
	node_02229208 [ label = "logical_or_expression" color = red] 
	node_02229208 -> node_02229188
	node_0222A888 [ label = "logical_or_expression" color = red] 
	node_0222A888 -> node_0222A808
	node_0222C208 [ label = "logical_and_expression" color = red] 
	node_0222C208 -> node_0222C188
	node_02221B08 [ label = "primary_expression" color = red] 
	node_02221B08 -> node_02221A88
	node_02226188 [ label = "logical_or_expression" color = red] 
	node_02226188 -> node_02226108
	node_02227808 [ label = "logical_or_expression" color = red] 
	node_02227808 -> node_02227788
	node_02229188 [ label = "logical_and_expression" color = red] 
	node_02229188 -> node_02229108
	node_0222A808 [ label = "logical_and_expression" color = red] 
	node_0222A808 -> node_0222A788
	node_0222C188 [ label = "inclusive_or_expression" color = red] 
	node_0222C188 -> node_0222C108
	node_02221A88 [ label = "constant" color = red] 
	node_02221A88 -> node_02221A08
	node_02226108 [ label = "logical_and_expression" color = red] 
	node_02226108 -> node_02226088
	node_02227788 [ label = "logical_and_expression" color = red] 
	node_02227788 -> node_02227708
	node_02229108 [ label = "inclusive_or_expression" color = red] 
	node_02229108 -> node_02229088
	node_0222A788 [ label = "inclusive_or_expression" color = red] 
	node_0222A788 -> node_0222A708
	node_0222C108 [ label = "exclusive_or_expression" color = red] 
	node_0222C108 -> node_0222C088
	node_02221A08 [ label = "64" color = blue] 
	node_02226088 [ label = "inclusive_or_expression" color = red] 
	node_02226088 -> node_02226008
	node_02227708 [ label = "inclusive_or_expression" color = red] 
	node_02227708 -> node_02227688
	node_02229088 [ label = "exclusive_or_expression" color = red] 
	node_02229088 -> node_02229008
	node_0222A708 [ label = "exclusive_or_expression" color = red] 
	node_0222A708 -> node_0222A688
	node_0222C088 [ label = "and_expression" color = red] 
	node_0222C088 -> node_0222C008
	node_02226008 [ label = "exclusive_or_expression" color = red] 
	node_02226008 -> node_02225F88
	node_02227688 [ label = "exclusive_or_expression" color = red] 
	node_02227688 -> node_02227608
	node_02229008 [ label = "and_expression" color = red] 
	node_02229008 -> node_02228F88
	node_0222A688 [ label = "and_expression" color = red] 
	node_0222A688 -> node_0222A608
	node_0222C008 [ label = "equality_expression" color = red] 
	node_0222C008 -> node_0222BF88
	node_02225F88 [ label = "and_expression" color = red] 
	node_02225F88 -> node_02225F08
	node_02227608 [ label = "and_expression" color = red] 
	node_02227608 -> node_02227588
	node_02228F88 [ label = "equality_expression" color = red] 
	node_02228F88 -> node_02228F08
	node_0222A608 [ label = "equality_expression" color = red] 
	node_0222A608 -> node_0222A588
	node_0222BF88 [ label = "relational_expression" color = red] 
	node_0222BF88 -> node_0222BF08
	node_02225F08 [ label = "equality_expression" color = red] 
	node_02225F08 -> node_02225E88
	node_02227588 [ label = "equality_expression" color = red] 
	node_02227588 -> node_02227508
	node_02228F08 [ label = "relational_expression" color = red] 
	node_02228F08 -> node_02228E88
	node_0222A588 [ label = "relational_expression" color = red] 
	node_0222A588 -> node_0222A508
	node_0222BF08 [ label = "shift_expression" color = red] 
	node_0222BF08 -> node_0222BE88
	node_02225E88 [ label = "relational_expression" color = red] 
	node_02225E88 -> node_02225E08
	node_02227508 [ label = "relational_expression" color = red] 
	node_02227508 -> node_02227488
	node_02228E88 [ label = "shift_expression" color = red] 
	node_02228E88 -> node_02228E08
	node_0222A508 [ label = "shift_expression" color = red] 
	node_0222A508 -> node_0222A488
	node_0222BE88 [ label = "additive_expression" color = red] 
	node_0222BE88 -> node_0222BE08
	node_02225E08 [ label = "shift_expression" color = red] 
	node_02225E08 -> node_02225D88
	node_02227488 [ label = "shift_expression" color = red] 
	node_02227488 -> node_02227408
	node_02228E08 [ label = "additive_expression" color = red] 
	node_02228E08 -> node_02228D88
	node_0222A488 [ label = "additive_expression" color = red] 
	node_0222A488 -> node_0222A408
	node_0222BE08 [ label = "multiplicative_expression" color = red] 
	node_0222BE08 -> node_0222BD88
	node_02225D88 [ label = "additive_expression" color = red] 
	node_02225D88 -> node_02225D08
	node_02227408 [ label = "additive_expression" color = red] 
	node_02227408 -> node_02227388
	node_02228D88 [ label = "multiplicative_expression" color = red] 
	node_02228D88 -> node_02228D08
	node_0222A408 [ label = "multiplicative_expression" color = red] 
	node_0222A408 -> node_0222A388
	node_0222BD88 [ label = "cast_expression" color = red] 
	node_0222BD88 -> node_0222BD08
	node_02225D08 [ label = "multiplicative_expression" color = red] 
	node_02225D08 -> node_02225C88
	node_02227388 [ label = "multiplicative_expression" color = red] 
	node_02227388 -> node_02227308
	node_02228D08 [ label = "cast_expression" color = red] 
	node_02228D08 -> node_02228C88
	node_0222A388 [ label = "cast_expression" color = red] 
	node_0222A388 -> node_0222A308
	node_0222BD08 [ label = "unary_expression" color = red] 
	node_0222BD08 -> node_0222BC88
	node_02225C88 [ label = "cast_expression" color = red] 
	node_02225C88 -> node_02225C08
	node_02227308 [ label = "cast_expression" color = red] 
	node_02227308 -> node_02227288
	node_02228C88 [ label = "unary_expression" color = red] 
	node_02228C88 -> node_02228C08
	node_0222A308 [ label = "unary_expression" color = red] 
	node_0222A308 -> node_0222A288
	node_0222BC88 [ label = "postfix_expression" color = red] 
	node_0222BC88 -> node_0222BC08
	node_02225C08 [ label = "unary_expression" color = red] 
	node_02225C08 -> node_02225B88
	node_02227288 [ label = "unary_expression" color = red] 
	node_02227288 -> node_02227208
	node_02228C08 [ label = "postfix_expression" color = red] 
	node_02228C08 -> node_02228B88
	node_0222A288 [ label = "postfix_expression" color = red] 
	node_0222A288 -> node_0222A208
	node_0222BC08 [ label = "primary_expression" color = red] 
	node_0222BC08 -> node_0222BB88
	node_02225B88 [ label = "postfix_expression" color = red] 
	node_02225B88 -> node_02222A88
	node_02227208 [ label = "postfix_expression" color = red] 
	node_02227208 -> node_02227188
	node_02228B88 [ label = "primary_expression" color = red] 
	node_02228B88 -> node_02227A88
	node_0222A208 [ label = "primary_expression" color = red] 
	node_0222A208 -> node_0222A188
	node_0222BB88 [ label = "name" color = blue] 
	node_02222A88 [ label = "primary_expression" color = red] 
	node_02222A88 -> node_02222A08
	node_02227188 [ label = "primary_expression" color = red] 
	node_02227188 -> node_02227108
	node_02227A88 [ label = "name" color = blue] 
	node_0222A188 [ label = "string" color = red] 
	node_0222A188 -> node_0222A108
	node_02222A08 [ label = "string" color = red] 
	node_02222A08 -> node_02222988
	node_02227108 [ label = "string" color = red] 
	node_02227108 -> node_02227088
	node_0222A108 [ label = "\"Hello, %s!\\n\"" color = blue] 
	node_02222988 [ label = "\"Enter your name: \"" color = blue] 
	node_02227088 [ label = "\"%s.64\"" color = blue] 
}