digraph program {
	node_000000000031F780 [ label = "translation_unit" color = red ] 
	node_000000000031F780 -> node_0000000000870910
	node_000000000031F780 -> node_0000000000871390
	node_0000000000870910 [ label = "translation_unit" color = red ] 
	node_0000000000870910 -> node_000000000086FA50
	node_0000000000870910 -> node_0000000000870850
	node_0000000000871390 [ label = "external_declaration" color = red ] 
	node_0000000000871390 -> node_00000000008712D0
	node_000000000086FA50 [ label = "translation_unit" color = red ] 
	node_000000000086FA50 -> node_000000000086F990
	node_0000000000870850 [ label = "external_declaration" color = red ] 
	node_0000000000870850 -> node_0000000000870790
	node_00000000008712D0 [ label = "declaration" color = red ] 
	node_00000000008712D0 -> node_0000000000870D90
	node_00000000008712D0 -> node_0000000000871150
	node_00000000008712D0 -> node_0000000000871210
	node_000000000086F990 [ label = "external_declaration" color = red ] 
	node_000000000086F990 -> node_000000000086F8D0
	node_0000000000870790 [ label = "declaration" color = red ] 
	node_0000000000870790 -> node_0000000000870250
	node_0000000000870790 -> node_0000000000870610
	node_0000000000870790 -> node_00000000008706D0
	node_0000000000870D90 [ label = "declaration_specifiers" color = red ] 
	node_0000000000870D90 -> node_0000000000870A90
	node_0000000000870D90 -> node_0000000000870CD0
	node_0000000000871150 [ label = "init_declarator_list" color = red ] 
	node_0000000000871150 -> node_0000000000871090
	node_0000000000871210 [ label = ";" color = blue ] 
	node_000000000086F8D0 [ label = "function_definition" color = red ] 
	node_000000000086F8D0 -> node_000000000086B310
	node_000000000086F8D0 -> node_000000000086B790
	node_000000000086F8D0 -> node_000000000086F810
	node_0000000000870250 [ label = "declaration_specifiers" color = red ] 
	node_0000000000870250 -> node_0000000000870110
	node_0000000000870610 [ label = "init_declarator_list" color = red ] 
	node_0000000000870610 -> node_0000000000870550
	node_00000000008706D0 [ label = ";" color = blue ] 
	node_0000000000870A90 [ label = "type_qualifier" color = red ] 
	node_0000000000870A90 -> node_00000000008709D0
	node_0000000000870CD0 [ label = "declaration_specifiers" color = red ] 
	node_0000000000870CD0 -> node_0000000000870C10
	node_0000000000871090 [ label = "init_declarator" color = red ] 
	node_0000000000871090 -> node_0000000000870FD0
	node_000000000086B310 [ label = "declaration_specifiers" color = red ] 
	node_000000000086B310 -> node_000000000086B250
	node_000000000086B790 [ label = "declarator" color = red ] 
	node_000000000086B790 -> node_000000000086B6D0
	node_000000000086F810 [ label = "compound_statement" color = red ] 
	node_000000000086F810 -> node_000000000086B850
	node_000000000086F810 -> node_000000000086F690
	node_000000000086F810 -> node_000000000086F750
	node_0000000000870110 [ label = "type_specifier" color = red ] 
	node_0000000000870110 -> node_0000000000870050
	node_0000000000870550 [ label = "init_declarator" color = red ] 
	node_0000000000870550 -> node_0000000000870490
	node_00000000008709D0 [ label = "_Atomic" color = blue ] 
	node_0000000000870C10 [ label = "type_specifier" color = red ] 
	node_0000000000870C10 -> node_0000000000870B50
	node_0000000000870FD0 [ label = "declarator" color = red ] 
	node_0000000000870FD0 -> node_0000000000870F10
	node_000000000086B250 [ label = "type_specifier" color = red ] 
	node_000000000086B250 -> node_0000000000868060
	node_000000000086B6D0 [ label = "direct_declarator" color = red ] 
	node_000000000086B6D0 -> node_000000000086B490
	node_000000000086B6D0 -> node_000000000086B550
	node_000000000086B6D0 -> node_000000000086B610
	node_000000000086B850 [ label = "{" color = blue ] 
	node_000000000086F690 [ label = "block_item_list" color = red ] 
	node_000000000086F690 -> node_000000000086F5D0
	node_000000000086F750 [ label = "}" color = blue ] 
	node_0000000000870050 [ label = "atomic_type_specifier" color = red ] 
	node_0000000000870050 -> node_000000000086FB10
	node_0000000000870050 -> node_000000000086FBD0
	node_0000000000870050 -> node_000000000086FED0
	node_0000000000870050 -> node_000000000086FF90
	node_0000000000870490 [ label = "declarator" color = red ] 
	node_0000000000870490 -> node_00000000008703D0
	node_0000000000870B50 [ label = "int" color = blue ] 
	node_0000000000870F10 [ label = "direct_declarator" color = red ] 
	node_0000000000870F10 -> node_0000000000870E50
	node_0000000000868060 [ label = "void" color = blue ] 
	node_000000000086B490 [ label = "direct_declarator" color = red ] 
	node_000000000086B490 -> node_000000000086B3D0
	node_000000000086B550 [ label = "(" color = blue ] 
	node_000000000086B610 [ label = ")" color = blue ] 
	node_000000000086F5D0 [ label = "block_item" color = red ] 
	node_000000000086F5D0 -> node_000000000086F510
	node_000000000086FB10 [ label = "_Atomic" color = blue ] 
	node_000000000086FBD0 [ label = "(" color = blue ] 
	node_000000000086FED0 [ label = "type_name" color = red ] 
	node_000000000086FED0 -> node_000000000086FE10
	node_000000000086FF90 [ label = ")" color = blue ] 
	node_00000000008703D0 [ label = "direct_declarator" color = red ] 
	node_00000000008703D0 -> node_0000000000870310
	node_0000000000870E50 [ label = "b" color = blue ] 
	node_000000000086B3D0 [ label = "dangling_else" color = blue ] 
	node_000000000086F510 [ label = "statement" color = red ] 
	node_000000000086F510 -> node_000000000086F450
	node_000000000086FE10 [ label = "specifier_qualifier_list" color = red ] 
	node_000000000086FE10 -> node_000000000086FD50
	node_0000000000870310 [ label = "a" color = blue ] 
	node_000000000086F450 [ label = "selection_statement" color = red ] 
	node_000000000086F450 -> node_000000000086B910
	node_000000000086F450 -> node_000000000086B9D0
	node_000000000086F450 -> node_000000000086C810
	node_000000000086F450 -> node_000000000086C8D0
	node_000000000086F450 -> node_000000000086F390
	node_000000000086FD50 [ label = "type_specifier" color = red ] 
	node_000000000086FD50 -> node_000000000086FC90
	node_000000000086B910 [ label = "if" color = blue ] 
	node_000000000086B9D0 [ label = "(" color = blue ] 
	node_000000000086C810 [ label = "expression" color = red ] 
	node_000000000086C810 -> node_000000000086C750
	node_000000000086C8D0 [ label = ")" color = blue ] 
	node_000000000086F390 [ label = "statement" color = red ] 
	node_000000000086F390 -> node_000000000086F2D0
	node_000000000086FC90 [ label = "int" color = blue ] 
	node_000000000086C750 [ label = "assignment_expression" color = red ] 
	node_000000000086C750 -> node_000000000086C690
	node_000000000086F2D0 [ label = "selection_statement" color = red ] 
	node_000000000086F2D0 -> node_000000000086CA50
	node_000000000086F2D0 -> node_000000000086CB10
	node_000000000086F2D0 -> node_000000000086E9D0
	node_000000000086F2D0 -> node_000000000086EA90
	node_000000000086F2D0 -> node_000000000086ED90
	node_000000000086F2D0 -> node_000000000086EE50
	node_000000000086F2D0 -> node_000000000086F210
	node_000000000086C690 [ label = "conditional_expression" color = red ] 
	node_000000000086C690 -> node_000000000086C5D0
	node_000000000086CA50 [ label = "if" color = blue ] 
	node_000000000086CB10 [ label = "(" color = blue ] 
	node_000000000086E9D0 [ label = "expression" color = red ] 
	node_000000000086E9D0 -> node_000000000086E910
	node_000000000086EA90 [ label = ")" color = blue ] 
	node_000000000086ED90 [ label = "statement" color = red ] 
	node_000000000086ED90 -> node_000000000086ECD0
	node_000000000086EE50 [ label = "else" color = blue ] 
	node_000000000086F210 [ label = "statement" color = red ] 
	node_000000000086F210 -> node_000000000086F150
	node_000000000086C5D0 [ label = "logical_or_expression" color = red ] 
	node_000000000086C5D0 -> node_000000000086C510
	node_000000000086E910 [ label = "assignment_expression" color = red ] 
	node_000000000086E910 -> node_000000000086E850
	node_000000000086ECD0 [ label = "jump_statement" color = red ] 
	node_000000000086ECD0 -> node_000000000086EB50
	node_000000000086ECD0 -> node_000000000086EC10
	node_000000000086F150 [ label = "jump_statement" color = red ] 
	node_000000000086F150 -> node_000000000086EFD0
	node_000000000086F150 -> node_000000000086F090
	node_000000000086C510 [ label = "logical_and_expression" color = red ] 
	node_000000000086C510 -> node_000000000086C450
	node_000000000086E850 [ label = "conditional_expression" color = red ] 
	node_000000000086E850 -> node_000000000086E790
	node_000000000086EB50 [ label = "return" color = blue ] 
	node_000000000086EC10 [ label = ";" color = blue ] 
	node_000000000086EFD0 [ label = "return" color = blue ] 
	node_000000000086F090 [ label = ";" color = blue ] 
	node_000000000086C450 [ label = "inclusive_or_expression" color = red ] 
	node_000000000086C450 -> node_000000000086C390
	node_000000000086E790 [ label = "logical_or_expression" color = red ] 
	node_000000000086E790 -> node_000000000086E6D0
	node_000000000086C390 [ label = "exclusive_or_expression" color = red ] 
	node_000000000086C390 -> node_000000000086C2D0
	node_000000000086E6D0 [ label = "logical_and_expression" color = red ] 
	node_000000000086E6D0 -> node_000000000086E610
	node_000000000086C2D0 [ label = "and_expression" color = red ] 
	node_000000000086C2D0 -> node_000000000086C210
	node_000000000086E610 [ label = "inclusive_or_expression" color = red ] 
	node_000000000086E610 -> node_000000000086E550
	node_000000000086C210 [ label = "equality_expression" color = red ] 
	node_000000000086C210 -> node_000000000086C150
	node_000000000086E550 [ label = "exclusive_or_expression" color = red ] 
	node_000000000086E550 -> node_000000000086E490
	node_000000000086C150 [ label = "relational_expression" color = red ] 
	node_000000000086C150 -> node_000000000086C090
	node_000000000086E490 [ label = "and_expression" color = red ] 
	node_000000000086E490 -> node_000000000086E3D0
	node_000000000086C090 [ label = "shift_expression" color = red ] 
	node_000000000086C090 -> node_000000000086BFD0
	node_000000000086E3D0 [ label = "equality_expression" color = red ] 
	node_000000000086E3D0 -> node_000000000086E310
	node_000000000086BFD0 [ label = "additive_expression" color = red ] 
	node_000000000086BFD0 -> node_000000000086BF10
	node_000000000086E310 [ label = "relational_expression" color = red ] 
	node_000000000086E310 -> node_000000000086E250
	node_000000000086BF10 [ label = "multiplicative_expression" color = red ] 
	node_000000000086BF10 -> node_000000000086BD90
	node_000000000086E250 [ label = "shift_expression" color = red ] 
	node_000000000086E250 -> node_000000000086D110
	node_000000000086BD90 [ label = "cast_expression" color = red ] 
	node_000000000086BD90 -> node_000000000086BCD0
	node_000000000086D110 [ label = "additive_expression" color = red ] 
	node_000000000086D110 -> node_000000000086D050
	node_000000000086BCD0 [ label = "unary_expression" color = red ] 
	node_000000000086BCD0 -> node_000000000086BC10
	node_000000000086D050 [ label = "multiplicative_expression" color = red ] 
	node_000000000086D050 -> node_000000000086CED0
	node_000000000086BC10 [ label = "postfix_expression" color = red ] 
	node_000000000086BC10 -> node_000000000086BB50
	node_000000000086CED0 [ label = "cast_expression" color = red ] 
	node_000000000086CED0 -> node_000000000086CE10
	node_000000000086BB50 [ label = "primary_expression" color = red ] 
	node_000000000086BB50 -> node_000000000086BE50
	node_000000000086CE10 [ label = "unary_expression" color = red ] 
	node_000000000086CE10 -> node_000000000086CD50
	node_000000000086BE50 [ label = "constant" color = red ] 
	node_000000000086BE50 -> node_000000000086BA90
	node_000000000086CD50 [ label = "postfix_expression" color = red ] 
	node_000000000086CD50 -> node_000000000086CC90
	node_000000000086BA90 [ label = "1" color = blue ] 
	node_000000000086CC90 [ label = "primary_expression" color = red ] 
	node_000000000086CC90 -> node_000000000086CF90
	node_000000000086CF90 [ label = "constant" color = red ] 
	node_000000000086CF90 -> node_000000000086CBD0
	node_000000000086CBD0 [ label = "1" color = blue ] 
}